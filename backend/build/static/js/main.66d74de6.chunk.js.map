{"version":3,"sources":["Context/Context.js","Components/CommentsBox/TopCommentsBox/TopCommentsBox.js","Components/CommentsBox/CommentsBox.js","Components/CommentsBox/SubCommentsBox/SubCommentsBox.js","Components/Message/SubMessage/SubMessage.js","Components/Message/Message.js","MessageScroll.js","App.js","index.js"],"names":["MainContext","React","createContext","useMainContext","useContext","ContextProvider","props","useState","messageUpdate","setMessageUpdate","commentIncrement","setCommentIncrement","value","messageReset","setMessageReset","Provider","children","TopCommentsBox","message","useRef","showCommentLine","setCommentLine","showButtons","setShowButtons","disableBtn","setDisableBtn","className","autoFocus","type","placeholder","ref","onFocus","onBlur","onKeyUp","event","currMessage","target","disabled","onClick","preventDefault","fetch","method","headers","body","JSON","stringify","messageData","current","then","prevState","style","color","backgroundColor","CommentsBox","changeOpenReply","useOpenReply","messageId","useKey","SubCommentsBox","console","log","parentKey","showReply","SubMessage","likeIcon","numLikes","openReply","setOpenReply","prev","toggleLike","likes","user","innerHTML","subId","Message","arrowUp","setArrowUp","arrow","editable","replies","length","map","reply","_id","Math","random","MessageScroll","commentIncrementRef","messages","setMessages","showBottomBar","setShowBottomBar","useEffect","limitNum","res","json","comments","commentId","commentData","currentMessage","currentMessageIndex","findIndex","splice","updateComment","deleteComment","observer","IntersectionObserver","entries","isIntersecting","setTimeout","threshold","bottomBar","setBottomBar","currentBottomBar","currentObserver","observe","unobserve","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66d74de6.chunk.js","sourcesContent":["import React from 'react';\n\nconst MainContext = React.createContext();\n\nexport function useMainContext() {\n    return React.useContext(MainContext);\n}\n\nexport function ContextProvider(props) {\n    // The state that allows us to trigger \n    // either an update or delete request of an individual comment\n    const [messageUpdate, setMessageUpdate] = React.useState();\n\n    // Holds the current increment value. Used by the Intersection Observer when fetching new comments\n    const [commentIncrement, setCommentIncrement] = React.useState(10);\n\n    // This state boolean will be changed when \n    // posting a new comment to refresh the first 10 message\n    const [messageReset, setMessageReset] = React.useState(false);\n    const value = {\n        messageReset,\n        setMessageReset,\n        messageUpdate,\n        setMessageUpdate,\n        commentIncrement,\n        setCommentIncrement\n    }\n    return (\n        <MainContext.Provider value={value}>\n            {props.children}\n        </MainContext.Provider>\n    )\n}","import React from 'react';\nimport '../CommentsBox.css';\n// Main context\nimport {useMainContext} from '../../../Context/Context';\n\nconst TopCommentsBox = (props) => {\n    // Get message reset function from main context\n    const {setMessageReset, setCommentIncrement} = useMainContext();\n\n    const message = React.useRef(null);\n    // Trigger the underline animation when input clicked rather than page load\n    const [showCommentLine, setCommentLine] = React.useState(false);\n    // True on focus, False on CANCEL press\n    const [showButtons, setShowButtons] = React.useState(false);\n    // True on input data, False when input is blank.\n    const [disableBtn, setDisableBtn] = React.useState(true);\n\n    // Event handler when the user focuses on the input. \n    // Show underline and button\n    // onFocus\n    const commentFocus = () => {\n        setCommentLine(true);\n        setShowButtons(true);\n    }\n\n    // When input clicked, hide the underline\n    // onBlur\n    const commentFocusOut = () => {\n        setCommentLine(false);\n    }\n\n    // If input value isn't empty, enable commentBtn\n    // onKeyUp\n    const commentStroke = event => {\n        let currMessage = event.target.value;\n        // If the user has typed into the unput\n        if(currMessage){\n            // Show button\n            setDisableBtn(false);\n        } else {\n            // Otherwise hide button\n            setDisableBtn(true);\n        }\n    }\n\n    // Send comment\n    const sendComment = (event) => {\n        // Prevent page refresh, which is the default behaviour of a button\n        // event when it's clicked\n        event.preventDefault();\n        // TODO: This will add comment to backend\n        fetch('/new-comment', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                // Send the value of the message we created\n                messageData: message.current.value\n            })}).then(() => {\n                // Reset entire comments and matching increment counter\n                setMessageReset(prevState => !prevState);\n                setCommentIncrement(10);\n                // Delete text input, update comments and disable comment btn\n                message.current.value = '';\n                setDisableBtn(true);\n            })\n    }\n\n    return (\n        <form>\n            <section className=\"commentBox\">\n                <input \n                    autoFocus={props.autoFocus}\n                    type=\"text\"\n                    placeholder=\"Add a public comment...\"\n                    ref={message}\n                    onFocus={commentFocus}\n                    onBlur={commentFocusOut}\n                    onKeyUp={commentStroke}\n                />\n                {/* Underline begins here */}\n                {   // The black div line will only show when the input is clicked\n                    // And false when clicking away from input\n                    showCommentLine && <div className=\"commentLine\"></div>\n                }\n            </section>\n            {   // Only show when showButtons is true\n                showButtons && (\n                    <>\n                    <button \n                        className=\"commentButton sendButton\" \n                        disabled={disableBtn}\n                        onClick={sendComment}\n                    >COMMENT</button>\n                    <button \n                        className=\"commentButton\" \n                        style={{color: \"grey\", backgroundColor:\"transparent\"}}\n                        onClick={() => {\n                            setShowButtons(false); // Hide button when cancelling\n                            message.current.value=\"\" // Clear comment when clicking on the cancel button\n                        }}\n                    >CANCEL</button>\n                    </>\n            )}\n        </form>\n    );\n};\n\nexport default TopCommentsBox;","import React from 'react';\nimport './CommentsBox.css';\nimport {useOpenReply} from '../Message/Message'\n// Main context\nimport {useMainContext} from '../../Context/Context';\n\n\nconst CommentsBox = (props) => {\n    // Access to change the message update\n    const {setMessageUpdate} = useMainContext();\n\n    // Importing context to show/hide the reply box\n    const changeOpenReply = useOpenReply();\n    // Reference to the message\n    const message = React.useRef(null);\n    // Trigger the underline animation when input clicked rather than page load\n    const [showCommentLine, setCommentLine] = React.useState(false);\n    // True on focus, False on CANCEL press\n    const [showButtons, setShowButtons] = React.useState(false);\n    // True on input data, False when input is blank.\n    const [disableBtn, setDisableBtn] = React.useState(true);\n\n    // Event handler when the user focuses on the input. \n    // Show underline and button\n    // onFocus\n    const commentFocus = () => {\n        setCommentLine(true);\n        setShowButtons(true);\n    }\n\n    // When input clicked, hide the underline\n    // onBlur\n    const commentFocusOut = () => {\n        setCommentLine(false);\n    }\n\n    // If input value isn't empty, enable commentBtn\n    // onKeyUp\n    const commentStroke = event => {\n        let currMessage = event.target.value;\n        // If the user has typed into the unput\n        if(currMessage){\n            // Show button\n            setDisableBtn(false);\n        } else {\n            // Otherwise hide button\n            setDisableBtn(true);\n        }\n    }\n\n    // Send comment\n    const sendComment = (event) => {\n        // Prevent page refresh, which is the default behaviour of a button\n        // event when it's clicked\n        event.preventDefault();\n        // TODO: This will add comment to backend\n        fetch('/new-sub-comment', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                messageId: props.useKey, \n                messageData: message.current.value\n            })\n        }).then(() => {\n            setMessageUpdate([1, props.useKey]);\n            // Reset everything to that it resets\n            message.current.value = '';\n            setDisableBtn(false);\n        })\n    }\n\n    return (\n        <form>\n            <section className=\"commentBox\">\n                <input \n                    autoFocus={props.autoFocus}\n                    type=\"text\"\n                    placeholder=\"Add a public comment...\"\n                    ref={message}\n                    onFocus={commentFocus}\n                    onBlur={commentFocusOut}\n                    onKeyUp={commentStroke}\n                />\n                {/* Underline begins here */}\n                {   // The black div line will only show when the input is clicked\n                    // And false when clicking away from input\n                    showCommentLine && <div className=\"commentLine\"></div>\n                }\n            </section>\n            {   // Only show when showButtons is true\n                showButtons && (\n                    <>\n                    <button \n                        className=\"commentButton sendButton\" \n                        disabled={disableBtn}\n                        onClick={sendComment}\n                    >COMMENT</button>\n                    <button \n                        className=\"commentButton\" \n                        style={{color: \"grey\", backgroundColor:\"transparent\"}}\n                        onClick={() => {\n                            setShowButtons(false); // Hide button when cancelling\n                            changeOpenReply()\n                        }}\n                    >CANCEL</button>\n                    </>\n            )}\n        </form>\n    );\n};\n\nexport default CommentsBox;","import React from 'react';\nimport {useOpenReply} from '../../Message/Message'\n// Main context\nimport {useMainContext} from '../../../Context/Context';\n\nconst SubCommentsBox = (props) => {\n    const {setMessageUpdate} = useMainContext();\n    // Importing context to show/hide the reply box\n    const changeOpenReply = useOpenReply();\n    console.log(changeOpenReply);\n    // Reference to the message\n    const message = React.useRef(null);\n    // Trigger the underline animation when input clicked rather than page load\n    const [showCommentLine, setCommentLine] = React.useState(false);\n    // True on focus, False on CANCEL press\n    const [showButtons, setShowButtons] = React.useState(false);\n    // True on input data, False when input is blank.\n    const [disableBtn, setDisableBtn] = React.useState(true);\n\n    // Event handler when the user focuses on the input. \n    // Show underline and button\n    // onFocus\n    const commentFocus = () => {\n        setCommentLine(true);\n        setShowButtons(true);\n    }\n\n    // When input clicked, hide the underline\n    // onBlur\n    const commentFocusOut = () => {\n        setCommentLine(false);\n    }\n\n    // If input value isn't empty, enable commentBtn\n    // onKeyUp\n    const commentStroke = event => {\n        let currMessage = event.target.value;\n        // If the user has typed into the unput\n        if(currMessage){\n            // Show button\n            setDisableBtn(false);\n        } else {\n            // Otherwise hide button\n            setDisableBtn(true);\n        }\n    }\n\n    // Send comment\n    const sendComment = (event) => {\n        // Prevent page refresh, which is the default behaviour of a button\n        // event when it's clicked\n        event.preventDefault();\n        // TODO: This will add comment to backend\n        fetch('/new-sub-comment', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({\n                messageId: props.parentKey, \n                messageData: message.current.value\n            })\n        }).then(() => {\n            setMessageUpdate([1, props.useKey]);\n        })\n    }\n\n    return (\n        <form>\n            <section className=\"commentBox\">\n                <input \n                    autoFocus={props.autoFocus}\n                    type=\"text\"\n                    placeholder=\"Add a public comment...\"\n                    ref={message}\n                    onFocus={commentFocus}\n                    onBlur={commentFocusOut}\n                    onKeyUp={commentStroke}\n                />\n                {/* Underline begins here */}\n                {   // The black div line will only show when the input is clicked\n                    // And false when clicking away from input\n                    showCommentLine && <div className=\"commentLine\"></div>\n                }\n            </section>\n            {   // Only show when showButtons is true\n                showButtons && (\n                    <>\n                    <button \n                        className=\"commentButton sendButton\" \n                        disabled={disableBtn}\n                        onClick={sendComment}\n                    >COMMENT</button>\n                    <button \n                        className=\"commentButton\" \n                        style={{color: \"grey\", backgroundColor:\"transparent\"}}\n                        onClick={() => {\n                            setShowButtons(false); // Hide button when cancelling\n                            changeOpenReply()\n                        }}\n                    >CANCEL</button>\n                    </>\n            )}\n        </form>\n    );\n};\n\nexport default SubCommentsBox;","import React from 'react';\nimport SubCommentsBox from '../../CommentsBox/SubCommentsBox/SubCommentsBox';\n// Main Context\nimport {useMainContext} from '../../../Context/Context';\n\n// Give children access to openReply,\n// So that the REPLY comments box knows when to appear\nconst showReply = React.createContext();\nexport function useOpenReply() {\n    return React.useContext(showReply);\n}\n\n// Show a single message section\nconst SubMessage = (props) => {\n\n    // Get the setMessageUpdate method \n    const {setMessageUpdate} = useMainContext();\n\n    // Change color of thumbs up icon\n    const likeIcon = React.useRef();\n\n    // Show number of likes\n    const numLikes = React.useRef();\n\n    // \n    const [openReply, setOpenReply] = React.useState(false);\n\n    // Event handlers\n\n    // Toggled when CANCEL button and REPLY are pressed\n    const changeOpenReply = () => {\n        setOpenReply(prev => prev = !prev);\n    }\n\n    // Like comment\n    let toggleLike = false;\n    let likes = props.likes;\n    const likeComment = () => {\n        toggleLike = !toggleLike;\n        if(toggleLike){\n            likes++;\n            likeIcon.current.style.color = \"#4688de\";\n        } else {\n            likes--;\n            likeIcon.current.style.color = \"grey\";\n        }\n        // Change the number of likes on the HTML page\n        // To the same as likes prop\n        numLikes.current.innerHTML = likes;\n        // Store this new value in the data base\n        fetch('/update-sub-like', {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({messageId: props.parentKey, subId: props.subId, likes: likes})\n        })\n    }\n\n    // Delete message\n    const deleteMessage = () => {\n        fetch('/delete-sub-comment', {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({messageId: props.parentKey, subId: props.subId})\n        })\n        .then(() => {\n            setMessageUpdate([1, props.parentKey]);\n        })\n    }\n\n\n    return (\n        <>\n            <section className=\"messageContainer\">\n                {\n                    // The user\n                }\n                <div className=\"messageUser\">{props.user}</div>\n                <i className=\"fas fa-user-circle\"></i>\n                {\n                    // The message\n                }\n                <div className=\"messageText\">{props.message}</div>\n                {\n                    // Icons\n                    // likes\n                    // REPLY / DELETE\n                }\n                <section className=\"messageIconsContainer\">\n                    <i \n                        className=\"fas fa-thumbs-up\" \n                        ref={likeIcon}\n                        onClick={likeComment}\n                    ></i>\n                    <div\n                        ref={numLikes}\n                    >{props.likes}</div>\n                    <i className=\"fas fa-thumbs-down\"></i>\n                    {\n                        props.user !== 'Super User' ? (\n                            <div\n                                onClick={changeOpenReply}\n                            >REPLY</div>\n                        ) : (\n                            <div\n                                onClick={deleteMessage}\n                            >DELETE</div>\n                        )\n                    }\n                </section>\n                {\n                    // Replies Section\n                }\n                <showReply.Provider value={changeOpenReply}>\n                {\n                    openReply && <SubCommentsBox\n                        autoFocus={true}\n                        parentKey={props.parentKey}\n                     />\n                    \n                }\n                </showReply.Provider>\n\n            </section>\n        </>\n    );\n};\n\nexport default SubMessage;","import React from 'react';\nimport './Message.css';\nimport CommentsBox from '../CommentsBox/CommentsBox';\nimport SubMessage from './SubMessage/SubMessage';\n// Main Context\nimport {useMainContext} from '../../Context/Context';\n\n// Give children access to openReply,\n// So that the REPLY comments box knows when to appear\nconst showReply = React.createContext();\nexport function useOpenReply() {\n    return React.useContext(showReply);\n}\n\n// Show a single message section\nconst Message = (props) => {\n    // Get access to the setMessageUpdate\n    const {setMessageUpdate} = useMainContext();\n\n    // Change color of thumbs up icon\n    const likeIcon = React.useRef();\n\n    // Show number of likes\n    const numLikes = React.useRef();\n\n    // Arrow to expand replies\n    const [arrowUp, setArrowUp] = React.useState(false);\n\n    // \n    const [openReply, setOpenReply] = React.useState(false);\n\n    // Event handlers\n\n    // Toggled when CANCEL button and REPLY are pressed\n    const changeOpenReply = () => {\n        setOpenReply(prev => prev = !prev);\n    }\n\n    // Toggle arrow up and down when the view replies is clicked\n    let arrow = <i className=\"fas fa-caret-down\"></i>;\n\n    const changeArrow = () => {\n        setArrowUp(prev => prev = !prev);\n    }\n\n    if(arrowUp){\n        arrow = <i className=\"fas fa-caret-up\"></i>;\n    } else {\n        arrow = <i className=\"fas fa-caret-down\"></i>;\n    }\n\n    // Like comment\n    let toggleLike = false;\n    let likes = props.likes;\n    const likeComment = () => {\n        toggleLike = !toggleLike;\n        if(toggleLike){\n            likes++;\n            likeIcon.current.style.color = \"#4688de\";\n        } else {\n            likes--;\n            likeIcon.current.style.color = \"grey\";\n        }\n        // Change the number of likes on the HTML page\n        // To the same as likes prop\n        numLikes.current.innerHTML = likes;\n\n        // Store this new value in the data base\n        fetch('/update-like', {\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({messageId: props.useKey, likes: likes})\n        })\n    }\n\n    \n\n    // Delete message\n    const deleteMessage = () => {\n        console.log(`useKey: ${props.useKey}`);\n        fetch('/delete-comment',{\n            method: 'POST',\n            headers: {'Content-Type':'application/json'},\n            body: JSON.stringify({messageId: props.useKey})\n        })\n        .then(() => {\n            setMessageUpdate([2, props.useKey]);\n        })\n    }\n\n\n    return (\n        <>\n            <section className=\"messageContainer\">\n                {\n                    // The user\n                }\n                <div className=\"messageUser\">{props.user}</div>\n                <i className=\"fas fa-user-circle\"></i>\n                {\n                    // The message\n                }\n                <div className=\"messageText\">{props.message}</div>\n                {\n                    // Icons\n                    // likes\n                    // REPLY / DELETE\n                }\n                <section className=\"messageIconsContainer\">\n                    <i \n                        className=\"fas fa-thumbs-up\" \n                        ref={likeIcon}\n                        onClick={likeComment}\n                    ></i>\n                    <div\n                        ref={numLikes}\n                    >{props.likes}</div>\n                    <i className=\"fas fa-thumbs-down\"></i>\n                    {\n                        !props.editable ? (\n                            <div\n                                onClick={changeOpenReply}\n                            >REPLY</div>\n                        ) : (\n                            <div\n                                onClick={deleteMessage}\n                            >DELETE</div>\n                        )\n                    }\n                </section>\n                {\n                    // Replies Section\n                }\n                <showReply.Provider value={changeOpenReply}>\n                {\n                    openReply && <CommentsBox\n                        useKey={props.useKey}\n                        autoFocus={true}\n                     />\n                    \n                }\n                </showReply.Provider>\n                {   /** Only render if there are any replies */\n                    props.replies.length > 0 && (\n                        <section \n                            className=\"arrowReplies\"\n                            onClick={changeArrow}\n                        >\n                            {arrow}\n                            <div>View {props.replies.length} replies</div>\n\n                        </section>\n                    )\n                }\n                { /** Display the reply messages */}\n                {\n                    arrowUp && (\n                    <section className=\"subMessages\">\n                    \n                    {\n                        props.replies.map(reply => (\n                            <SubMessage \n                                key={Math.random()}\n                                parentKey={props.useKey}\n                                subId={reply._id} // Need this for a fetch request to delete a sub comment\n                                user={reply.user}\n                                message={reply.message}\n                                likes={reply.likes}\n                            />\n                        ))\n                    }\n\n                    { \n                        /** Show single reply \n                        <SubMessage \n                            user=\"Dummy Reply 2\" \n                            message=\"This is a dummy reply\" \n                            likes={2} \n                        />*/ \n                    }\n\n                    </section>\n                    )\n                }\n                \n            </section>\n        </>\n    );\n};\n\nexport default Message;","import React from 'react';\nimport Message from './Components/Message/Message';\n// Main context\nimport {useMainContext} from './Context/Context';\n\nconst MessageScroll = (props) => {\n\n    // When bool from main context changes, re-render message list\n    const {messageReset, commentIncrement, setCommentIncrement, messageUpdate} = useMainContext();\n\n    // Make sure Increment value in call back function for Intersection Observer is up to date\n    const commentIncrementRef = React.useRef(commentIncrement);\n\n    // API - Get the messages \n    const [messages, setMessages] = React.useState([]);\n\n    // Show the bottom bar - loader \n    const [showBottomBar, setShowBottomBar] = React.useState(true);\n\n    // Load up the first 10 comments. \n    // Do this either on application start or when a new comment is posted\n    React.useEffect(() => {\n        setShowBottomBar(true);\n        fetch(\"/get-data\", {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({limitNum: 10})\n        }).then(res => res.json()).then(comments => {\n            setMessages(comments);\n        })\n    }, [messageReset]);\n\n    // Either update or delete an individual comment\n    React.useEffect(() => {\n        if(messageUpdate){\n            // If message update [0] is 1 then that means we update, else we delete comment\n            if(messageUpdate[0] ===  1){\n                fetch('/update-comment', {\n                    method: 'POST',\n                    headers: {'Content-Type':'application/json'},\n                    body: JSON.stringify({commentId: messageUpdate[1]})\n                })\n                .then(res => res.json())\n                .then(commentData => {\n                    updateComment(commentData);\n                })\n            } else if (messageUpdate[0] ===  2){\n                deleteComment();\n            }\n        }\n    }, [messageUpdate])\n\n    function deleteComment() {\n        let currentMessage = [...messages];\n        let currentMessageIndex = currentMessage.findIndex(message => message._id === messageUpdate[1]);\n        currentMessage.splice(currentMessageIndex, 1);\n        setMessages(currentMessage);\n    }\n\n    function updateComment(commentData) {\n        let currentMessage = [...messages];\n        if(commentData) {\n            // Get index matching comment\n            let currentMessageIndex = currentMessage.findIndex(message => message._id === commentData._id)\n            currentMessage.splice(currentMessageIndex, 1, commentData);\n            setMessages(currentMessage);\n        }\n    }\n\n    // Intersection observer\n    const observer = React.useRef(new IntersectionObserver(entries => {\n        const first = entries[0];\n        if(first.isIntersecting){\n            fetch('/get-more-data', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({commentIncrement: commentIncrementRef.current})\n            }).then(res => res.json()).then(comments => {\n                if(comments.length > 0){\n                    setTimeout(() => {\n                        setMessages(prev => [...prev, ...comments]);\n                    }, 500)   \n                } else {\n                    setTimeout(() => {\n                        setShowBottomBar(false);\n                    }, 500) \n                }\n                // We are comments.length just incase there aren't 10 comments left\n                setCommentIncrement(prev => prev += comments.length);\n            })\n        }\n    }), {threshold: 1})\n\n    // Ensure Comment Increment is up to date\n    React.useEffect (() => {\n        commentIncrementRef.current = commentIncrement;\n    }, [commentIncrement]);\n\n    // bottomBar will contain the bottom JSX element\n    const [bottomBar, setBottomBar] = React.useState(null);\n\n    React.useEffect(() => {\n        const currentBottomBar = bottomBar;\n        const currentObserver = observer.current;\n        if(currentBottomBar) {\n            currentObserver.observe(currentBottomBar);\n        }\n\n        return () => {\n            if(currentBottomBar){\n                currentObserver.unobserve(currentBottomBar);\n            }\n        }\n    }, [bottomBar])\n\n\n    return (\n        <>\n            {/** Show a single message \n            <Message \n                user=\"Dummy User\"\n                editable={false} // If not the owner, cannot delete\n                message=\"Dummy Message\"\n                likes={25}\n            />*/}\n            {/** Show messages dynamically */\n                messages.map(message => (\n                    <Message \n                        key={message._id} // cannot use this in child\n                        useKey={message._id} // But we can use this\n                        user={message.user}\n                        editable={message.editable}\n                        message={message.message}\n                        likes={message.likes}\n                        replies={message.replies}\n                    />\n                ))\n            }\n            {/** This will act as the loader */}\n            {\n                // Don't need if there is less than 9 messages\n                // show bottom bar needs to be true as well\n                messages.length > 9 && showBottomBar ? (\n                <div className=\"bottomBar\" ref={setBottomBar}><div className=\"loader\"></div></div> \n                ) : null\n            }\n\n        </>\n    );\n};\n\nexport default MessageScroll;","import './App.css';\nimport TopCommentsBox from './Components/CommentsBox/TopCommentsBox/TopCommentsBox';\nimport MessageScroll from './MessageScroll';\n// Main context\nimport {ContextProvider} from './Context/Context';\n\nfunction App() {\n  return (\n    <ContextProvider>\n      <div className=\"ColHolder\">\n        {\n          // Comment box autoFocus false so that on page load it \n          // doesn't go straight there \n        }\n        <TopCommentsBox autoFocus={false} />\n        {\n          // Render all elemtns below the Top Comments Box\n          // Handle infinate scrolling logic\n        }\n        <MessageScroll />\n      </div>\n    </ContextProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}